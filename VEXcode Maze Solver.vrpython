{"mode":"Text","textContent":"# ------------------------------------------\n# \n# \tProject:      VEXcode VR Maze Solver\n#\tAuthor:       Hyunwoo Choi\n#\tCreated:      January 12 2021\n#\tDescription:  Solves a VEXcode VR maze using the right hand rule\n# \n# ------------------------------------------\n\n# Library imports\nfrom vexcode import *\n\n#main\ndef main():\n    #putting down the pen to show the path of the robot\n    pen.set_pen_color(BLUE)\n    pen.move(DOWN)\n\n    drivetrain.set_drive_velocity(50, PERCENT)\n    drivetrain.set_turn_velocity(50, PERCENT)\n\n    \n    #start with 90 deg turned right since we are using a right hand rule to solve this maze\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    \n    #run\n    run()\n\n#this method checks all three sides and returns a boolean for each side if it is blocked or not\ndef checkSides():\n    \n    rightC, frontC, leftC = True, True, True\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    if front_eye.near_object() and distance.get_distance(MM) < 3000:\n        rightC = False\n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    if front_eye.near_object() and distance.get_distance(MM) < 3000:\n        frontC = False\n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    if front_eye.near_object() and distance.get_distance(MM) < 3000:\n        leftC = False\n        \n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n\n    return rightC, frontC, leftC\n\n#main run function\ndef run():\n    #program loop\n    while True:\n\n        #drive\n        drivetrain.drive_for(FORWARD, 250, MM)\n\n        #checks if the robot's surroundings are clear by using the method above\n        rightClear, frontClear, leftClear = checkSides()\n\n        #uses the 3 boolean values above to determine the which direction to turn\n        if frontClear and not rightClear:\n            print(\"\")\n        elif rightClear:\n            drivetrain.turn_for(RIGHT, 90, DEGREES)\n        elif (not (rightClear and frontClear)) and leftClear:\n            drivetrain.turn_for(LEFT, 90, DEGREES)\n        elif not (rightClear and leftClear and frontClear):\n            drivetrain.turn_for(RIGHT, 180, DEGREES)\n\n        #if found an exit, stop\n        if(down_eye.detect(RED)):\n            break\n\n        wait(1,MSEC)\n\n    \n    \n# VR threads â€” Do not delete\nvr_thread(main())\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"PG","sdkVersion":"","appVersion":"","fileFormat":"1.0.0","icon":"","playground":"DynamicWallMaze"}